{"version":3,"sources":["service/ContactService.js","context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/InputGroup.js","components/contacts/AddContact.js","components/pages/About.js","components/pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["BACKEND_URL","axios","get","id","delete","contact","post","Context","React","createContext","reducer","state","action","type","contacts","filter","payload","map","Provider","dispatch","setState","ContactService","retrieveAll","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","window","confirm","deleteContact","name","email","phone","history","className","onClick","style","cursor","float","color","bind","push","Contacts","key","Header","branding","href","to","defaultProps","InputGroup","lblName","onChange","placeHolder","defValue","error","htmlFor","placeholder","classnames","AddContact","match","params","errors","event","target","onSubmit","preventDefault","saveContact","getContact","About","NotFound","App","basename","process","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.db8e784a.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport Contact from '../components/contacts/Contact'\r\nconst BACKEND_URL = \"http://localhost:8080/contacts\"\r\n\r\nclass ContactService {\r\n\r\n    retrieveAll() {\r\n        const res = axios.get(`${BACKEND_URL}/`)\r\n        return res\r\n    }\r\n    deleteContact(id) {\r\n        return axios.delete(`${BACKEND_URL}/${id}`)\r\n    }\r\n    getContact(id) {\r\n        return axios.get(`${BACKEND_URL}/${id}`)\r\n    }\r\n\r\n    saveContact(contact) {\r\n        return axios.post(`${BACKEND_URL}`, contact)\r\n    }\r\n    // updateCourse(userName, id, course) {\r\n    //     return axios.put(`${INSTRUCTOR_API_URL}/${userName}/courses/${id}`, course)\r\n    // }\r\n    // getInstructors() {\r\n    //     return axios.get(`${COURSE_API_URL}/instructors`)\r\n    // }\r\n}\r\nexport default new ContactService()","import React, { Component } from 'react'\r\nimport ContactService from './service/ContactService'\r\nconst Context = React.createContext();\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"DELETE_CONTACT\":\r\n            return {\r\n                ...state, contacts: state.contacts.filter(\r\n                    contact => contact.id !== action.payload\r\n                )\r\n            }\r\n\r\n        case \"ADD_CONTACT\":\r\n\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n\r\n            }\r\n        case \"UPDATE_CONTACT\":\r\n\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(contact => {\r\n                    return contact.id === action.payload.id ? contact = action.payload : contact\r\n                })\r\n\r\n            }\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\nexport class Provider extends Component {\r\n    state = {\r\n        contacts: [\r\n\r\n        ],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const res = await ContactService.retrieveAll()\r\n        this.setState({\r\n            contacts: res.data\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                {this.props.children}\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\nexport const Consumer = Context.Consumer","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Consumer } from '../../context'\r\nimport ContactService from '../../service/ContactService'\r\n\r\n\r\nclass Contact extends Component {\r\n    state = {\r\n        showContactInfo: true\r\n    }\r\n\r\n    onDeleteClick = async (id, dispatch) => {\r\n        if (window.confirm(\"Are you sure you want to delete this item?\")) {\r\n            await ContactService.deleteContact(id)\r\n            dispatch({ type: \"DELETE_CONTACT\", payload: id })\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { id, name, email, phone } = this.props.contact\r\n        const { history } = this.props\r\n        const { showContactInfo } = this.state\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value\r\n                    return (\r\n                        <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}{\"  \"}\r\n                                <i className=\"fas fa-sort-down\" onClick={() => this.setState({ showContactInfo: !this.state.showContactInfo })} style={{ cursor: 'pointer' }} />\r\n                                <i className='fas fa-times' style={{ cursor: \"pointer\", float: \"right\", color: \"red\" }} onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\r\n                                <i className='fas fa-edit' style={{ cursor: \"pointer\", float: \"right\", color: \"green\" }} onClick={() => history.push(`contact/add/${id}`)}></i>\r\n                            </h4>\r\n                            {showContactInfo ?\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Email: {email}</li>\r\n                                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                                </ul>\r\n                                : null}\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n\r\n}\r\nexport default Contact","import React, { Component } from 'react'\r\nimport Contact from './Contact'\r\nimport { Consumer } from '../../context'\r\nclass Contacts extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { contacts } = value\r\n                    return (\r\n                        <>\r\n                            <h1 className=\"display-4 mb-2\"><span className=\"text-danger\">Contact</span> List</h1>\r\n                            {contacts.map(contact =>\r\n                                <Contact key={contact.id}\r\n                                    contact={contact} history={this.props.history} />\r\n                            )}\r\n                        </>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n\r\n    }\r\n}\r\nexport default Contacts\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Header = ({ branding }) => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-sm \r\n        navbar-dark bg-danger mb-3 py-0\">\r\n            <div className=\"container\">\r\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\r\n                <div>\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/\" className=\"nav-link\">\r\n                                <i className=\"fas fa-home\" /> Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/contact/add/-1\" className=\"nav-link\">\r\n                                <i className=\"fas fa-plus\" />Add Contact</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link to=\"/about\" className=\"nav-link\">\r\n                                <i className=\"fas fa-question\" />About</Link>\r\n                        </li>\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\n\r\nHeader.defaultProps = {\r\n    branding: \"My App\"\r\n};\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classnames from 'classnames'\r\n\r\nconst InputGroup = ({ lblName, name, type, onChange, placeHolder, defValue, error }) => {\r\n    return (\r\n        <div>\r\n            <div className=\"form-group\">\r\n                <label htmlFor=\"name\">{lblName}</label>\r\n                <input\r\n                    id={name}\r\n                    type={type}\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    placeholder={placeHolder}\r\n                    value={defValue}\r\n                    className={classnames(\"form-control form-control-lg\", { 'is-invalid': error })} />\r\n                {error && <div className=\"invalid-feedback\">{error}</div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nInputGroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    lblName: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    placeHolder: PropTypes.string.isRequired,\r\n    defValue: PropTypes.string.isRequired,\r\n    error: PropTypes.string\r\n};\r\n\r\nInputGroup.defaultProps = {\r\n    type: \"text\"\r\n}\r\nexport default InputGroup;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context'\r\nimport InputGroup from '../layout/InputGroup'\r\nimport ContactService from '../../service/ContactService'\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        id: this.props.match.params.id,\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        errors: {}\r\n    }\r\n\r\n    onChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    onSubmit = async (dispatch, event) => {\r\n        event.preventDefault();\r\n        const { id, name, phone, email } = this.state\r\n        if (name === \"\") {\r\n            this.setState({ errors: { ...this.state.errors, name: \"Name Cannot be Empty\" } })\r\n            return\r\n        }\r\n        if (email === \"\") {\r\n            this.setState({ errors: { ...this.state.errors, email: \"Email Cannot be Empty\" } })\r\n            return\r\n        }\r\n        if (phone === \"\") {\r\n            this.setState({ errors: { ...this.state.errors, phone: \"Phone Cannot be Empty\" } })\r\n            return\r\n        }\r\n        let contact = { name, email, phone }\r\n        if (id !== -1) {\r\n            contact = { ...contact, id }\r\n        }\r\n        const res = await ContactService.saveContact(contact)\r\n        const dispatchType = id === -1 ? \"ADD_CONTACT\" : \"UPDATE_CONTACT\"\r\n        dispatch({ type: dispatchType, payload: res.data })\r\n        this.setState({\r\n            id: '',\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        })\r\n        this.props.history.push(\"/\")\r\n    }\r\n    async componentDidMount() {\r\n        const { id } = this.state\r\n        if (id === -1) {\r\n            return\r\n        }\r\n        const res = await ContactService.getContact(id)\r\n        const { name, email, phone } = res.data\r\n        this.setState({\r\n            name,\r\n            email,\r\n            phone\r\n        })\r\n    }\r\n    render() {\r\n        const { name, email, phone, errors } = this.state\r\n        return (\r\n            <Consumer>\r\n                {value => {\r\n                    const { dispatch } = value\r\n                    return (\r\n                        <div className=\"card mb-3\">\r\n                            <div className=\"card-header\">Add Contact</div>\r\n                            <div className=\"card-body\">\r\n                                <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n                                    <InputGroup lblName=\"Name\" name=\"name\" onChange={this.onChange} placeHolder=\"Enter Name..\" defValue={name} error={errors.name} />\r\n                                    <InputGroup lblName=\"Email\" name=\"email\" type=\"email\" onChange={this.onChange} placeHolder=\"Enter Email..\" defValue={email} error={errors.email} />\r\n                                    <InputGroup lblName=\"Phone\" name=\"phone\" onChange={this.onChange} placeHolder=\"Enter Phone..\" defValue={phone} error={errors.phone} />\r\n                                    <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-success btn-block\" />\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                }}\r\n            </Consumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst About = () => {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\">About Contact Manager</h1>\r\n            <p className=\"lead\">Simple app to manage contacts</p>\r\n            <p className=\"text-secondary\">Version 1.0.0</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nAbout.propTypes = {};\r\n\r\nexport default About;","import React from 'react'\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <div>\r\n            <h1 className=\"display-4\"><span className=\"text-danger\">404 </span>Page Not Found</h1>\r\n            <p className=\"lead\">Sorry, that page does not exist</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport Contacts from './components/contacts/Contacts'\nimport Header from './components/layout/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { Provider } from './context'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport AddContact from './components/contacts/AddContact';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Header branding=\"Contact Manager\" />\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts} />\n              <Route exact path=\"/about\" component={About} />\n              <Route exact path=\"/contact/add/:id\" component={AddContact} />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}